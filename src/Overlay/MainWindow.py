import os
import webbrowser
from calendar import month
from datetime import datetime, time
from pathlib import Path

from PySide6.QtCore import QDate

from src.FileManagement.WeekDataProcessor import WeekDataProcessor
from src.FileManagement.WordTemplate import WordTemplate
from src.Overlay.AutoGenerated.MainWindow import Ui_MainWindow
from src.SettingManagement.ConfigManager import ConfigManager
from src.utils import load_csv


class MainWindow(Ui_MainWindow):

    def __init__(self,CM : ConfigManager):
        super().__init__()
        self.logger = CM.get_logger()
        self.CM = CM

    def setupUi(self, MainWindow):
        super().setupUi(MainWindow)

        self.gen_but.pressed.connect(lambda: self.on_gen_but_pressed())
        self.gen_but_tmp.pressed.connect(lambda: self.on_gen_but_tmp_pressed())
        self.successfactor_but.pressed.connect(lambda: self.on_sf_but_pressed())
        self.appdata_but.pressed.connect(lambda: self.on_appdata_but_pressed())
        self.config_but.pressed.connect(lambda: self.on_config_but_pressed())

        self.set_name(self.CM.get_name())
        self.set_temp_date(year=datetime.now().year,month=datetime.now().month)

        self.csv_drop.setCM(self.CM)

    def set_name(self,text):
        self.name.setText(text)
        self.name.repaint()

    def get_name(self):
        return self.name.text()

    def set_lehrjahr(self,lehrjahr):
        self.lehrjahr.setCurrentIndex(lehrjahr - 1)
        self.name.repaint()

    def get_lehrjahr(self):
        return self.lehrjahr.currentIndex() + 1

    def load_template(self):
        word_template = WordTemplate(self.logger, Path(self.CM.get_template_path()))
        if word_template.document is None:  # Falls das Laden der Word-Vorlage fehlschlägt, wird eine Fehlermeldung angezeigt
            #self.show_error("Fehler beim Laden der Vorlage.")
            return
        return word_template

    def on_gen_but_pressed(self,date = None):
        self.update_config()

        template = self.load_template()

        if date is None:
            csv = self.load_csv()
            WeekDataProcessor(self.CM, template, csv).process_all_weeks()
        else:
            WeekDataProcessor(self.CM, template).process_all_empty_weeks(date)

        try:
            output_path = template.save_document(Path(self.CM.get_output_path()))
            #self.show_success("Dokument erfolgreich erstellt.")
            os.startfile(output_path)
        except Exception as e:
            #self.show_error(f"Fehler beim Speichern des Dokuments: {e}")
            pass

    def update_config(self):
        self.CM.set_name(self.get_name())
        self.CM.set_year(str(self.get_lehrjahr()))
        self.CM.set_default_hours(str(8))

    def on_sf_but_pressed(self):
        webbrowser.open(self.CM.get_portal_link(), new=0, autoraise=True)

    def on_appdata_but_pressed(self):
        os.startfile(self.CM.get_appdata_path())

    def on_config_but_pressed(self):
        os.startfile(self.CM.get_config_path())

    def on_gen_but_tmp_pressed(self):
        date = self.get_temp_date_dict()
        self.on_gen_but_pressed(date)

    def set_temp_date(self, year: int, month: int):
        self.tmp_date.setDate(QDate(year,month,1))

    def get_temp_date_dict(self):
        return { 'year' : self.tmp_date.date().year() , 'month' : self.tmp_date.date().month() }

    def load_csv(self):
        csv_data = load_csv(self.CM, self.logger, Path(self.CM.get_csv_path()))
        if csv_data is None:  # Falls das Laden der CSV-Daten fehlschlägt, wird eine Fehlermeldung angezeigt
            #self.show_error("Fehler beim Laden der CSV-Datei.")
            return
        return csv_data