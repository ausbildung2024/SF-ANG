import os
import webbrowser
from datetime import datetime
from pathlib import Path

from PySide6.QtCore import QDate

from src.FileManagment.WeekDataProcessor import WeekDataProcessor
from src.FileManagment.WordProcessor import WordTemplate
from src.GUI.AutoGenerated.AG_MainWindow import Ui_MainWindow
from src.Settings.ConfigManager import ConfigManager
from src.FileManagment.CSVProcessor import CSVProcessor


class MainWindow(Ui_MainWindow):

    def __init__(self,CM : ConfigManager):
        super().__init__()
        self.CM = CM
        self.csv_processor = CSVProcessor(CM)

    def setupUi(self, MainWindow):
        super().setupUi(MainWindow)

        self.gen_but.pressed.connect(lambda: self.on_gen_but_pressed())
        self.gen_but_tmp.pressed.connect(lambda: self.on_gen_but_tmp_pressed())
        self.successfactor_but.pressed.connect(lambda: self.on_sf_but_pressed())
        self.appdata_but.pressed.connect(lambda: self.on_appdata_but_pressed())
        self.config_but.pressed.connect(lambda: self.on_config_but_pressed())

        self.set_name(self.CM.get_name())
        self.set_temp_date(year=datetime.now().year,month=datetime.now().month)

        self.csv_drop.setCM(self.CM)

    def set_name(self,text):
        self.name.setText(text)
        self.name.repaint()

    def get_name(self):
        return self.name.text()

    def set_lehrjahr(self,lehrjahr):
        self.lehrjahr.setCurrentIndex(lehrjahr - 1)
        self.name.repaint()

    def get_lehrjahr(self):
        return self.lehrjahr.currentIndex() + 1

    def load_template(self):
        word_template = WordTemplate(Path(self.CM.get_template_path()))
        if word_template.document is None:  # Falls das Laden der Word-Vorlage fehlschlägt, wird eine Fehlermeldung angezeigt
            #self.show_error("Fehler beim Laden der Vorlage.")
            return
        return word_template

    def on_gen_but_pressed(self,date = None):
        #Überprüfung ob Einstellungen verändert wurden
        self.update_config()

        #Laden des Templates
        template = self.load_template()

        #Verarbeitung der Daten
        if date is None:
            self.csv_processor.load_csv(Path(self.CM.get_csv_path()))
            WeekDataProcessor(self.CM, template, self.csv_processor).process_all_weeks()
        else:
            school = self.get_temp_week_data()
            WeekDataProcessor(self.CM, template, self.csv_processor,school).process_all_empty_weeks(date, school)

        #Speichern des dokuments
        try:
            output_path = template.save_document(Path(self.CM.get_output_path()))
            #self.show_success("Dokument erfolgreich erstellt.")
            os.startfile(output_path)
        except Exception as e:
            #self.show_error(f"Fehler beim Speichern des Dokuments: {e}")
            pass

    def update_config(self):
        self.CM.set_name(self.get_name())
        self.CM.set_year(str(self.get_lehrjahr()))
        self.CM.set_default_hours(str(8))

    def on_sf_but_pressed(self):
        webbrowser.open(self.CM.get_portal_link(), new=0, autoraise=True)

    def on_appdata_but_pressed(self):
        os.startfile(self.CM.get_appdata_path())

    def on_config_but_pressed(self):
        os.startfile(self.CM.get_config_path())

    def on_gen_but_tmp_pressed(self):
        date = self.get_temp_date_dict()
        self.on_gen_but_pressed(date)

    def set_temp_date(self, year: int, month: int):
        self.tmp_date.setDate(QDate(year,month,1))

    def get_temp_date_dict(self):
        return { 'year' : self.tmp_date.date().year() , 'month' : self.tmp_date.date().month() }

    def get_temp_week_data(self):
        return {
            "montag":self.cb_vorlage_montag.isChecked(),
            "dienstag": self.cb_vorlage_dienstag.isChecked(),
            "mittwoch": self.cb_vorlage_mittwoch.isChecked(),
            "donnerstag": self.cb_vorlage_donnerstag.isChecked(),
            "freitag": self.cb_vorlage_freitag.isChecked()
        }